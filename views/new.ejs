<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>ThaiDB : new</title>
    <link rel="stylesheet" type="text/css" href="/style.css">
    <style>
        .container {
            width: 80%;
            max-width: 1200px;
            margin: 0 auto;
        }
        fieldset ul li {
            padding: 5px;
            display: flex;
            flex-wrap: wrap;
            align-items: center;
        }
        textarea {
            vertical-align: top;
        }
        label {
            flex: 1 0 100px;
            max-width: 140px;
            margin-right: 10px;
            text-align: right;
        }
        label + * {
            flex: 1 0 220px;
            --max-width: 400px;
        }
        .upload-field {
            border: 1px solid silver;
            border-radius: 4px;
        }
    </style>
    <script src="/countries.js"></script>
    <script src="/thai_province_district.js"></script>
</head>
<body>
    <%- include('header'); -%>
    <script>
    function addText(parent, labelText, name, value) {
        let li = document.createElement("li");
        let label = document.createElement("label");
        label.setAttribute("for", name);
        label.innerText = labelText;
        li.appendChild(label);
        let control = document.createElement("input");
        control.setAttribute("type", "text");
        control.setAttribute("name", name);
        control.classList.add(name);
        control.value = value || "";
        li.appendChild(control);
        parent.appendChild(li);
        return li;
    }
    function fillSelect(select, options, valueFor) {
        if (!options)
            return;
        options.forEach(o=>{
            let option = document.createElement("option");
            option.value = valueFor ? valueFor(o) : o;
            option.text = o;
            select.appendChild(option);
        });
    }
    function addSelect(parent, labelText, name, options, value) {
        li = document.createElement("li");
        if (labelText) {
            label = document.createElement("label");
            label.setAttribute("for", name);
            label.innerText = labelText;
            li.appendChild(label);
        }
        control = document.createElement("select");
        control.setAttribute("name", name);
        control.classList.add(name);
        fillSelect(control, options);
        if (value) {
            control.selectedIndex = Array.prototype.findIndex.call(control.options, o=>o.value==value);
        }
        li.appendChild(control);
        parent.appendChild(li);
        return li;
    }
    function setEditValue(name, value) {
        let edit = document.getElementById(name);
        if (!edit)
            return;
        edit.value = value || "";
    }
    function setSelectValue(name, value) {
        let select = document.getElementById(name);
        if (!select)
            return;
        select.selectedIndex = Array.prototype.findIndex.call(select.options, o=>o.value==value);
    }
    </script>
    <script>
        var data = <%-JSON.stringify(data)%>;
    </script>
    <div class="container">
    <fieldset style="margin-top: 20px;"><legend>General</legend>
    <ul>
        <li><label for="id">Id</label> <input name="id" id="root.id"/></li>
        <li><label for="relevance">Relevance</label> 
            <select name="relevance" id="root.relevance">
                <option>beauty/cleanliness</option>
                <option>other articles</option>
            </select>
        </li>
    </ul>
    </fieldset>
    <script>
        setEditValue("root.id", data.id);
        setSelectValue("root.relevance", data.relevance);
    </script>
    <fieldset style="margin-top: 20px;"><legend>Bibliography</legend>
    <ul>
        <li><label for="total">Total articles</label> <input name="total" id="root.bibliography.total"/></li>
        <li><label for="headline">Headline</label> <input name="headline" id="root.bibliography.headline"/></li>
        <li><label for="headline-thai">Headline (Thai)</label> <input name="headline-thai" id="root.bibliography.headline-thai"/></li>
        <li><label for="newspaper">Newspaper</label> <select name="newspaper" id="root.bibliography.newspaper">
            <option>daily news</option>
            <option>thai rath</option>
        </select></li>
        <li><label for="date">Date</label> <input type="date" name="date" id="root.bibliography.date"/></li>
        <li><label for="publication">Publication</label> <input name="publication" id="root.bibliography.publication"/></li>
        <li><label for="page">Page</label> <input name="page" id="root.bibliography.page"/></li>
        <li><label for="location">Location</label> 
            <select name="location" id="root.bibliography.location">
                <option>Left</option>
                <option>Right</option>
                <option>Upper</option>
                <option>Lower</option>
                <option>Full page</option>
                <option>Lower left</option>
                <option>Lower right</option>
                <option>Lower-half</option>
                <option>Middle of the page</option>
                <option>Upper left</option>
                <option>Upper right</option>
                <option>Upper-half</option>
            </select>
        </li>
        <fieldset style="margin-top: 20px;"><legend>Size</legend>
        <ul>
            <li><label for="size-headline">Headline</label>
                <select name="size-headline" id="root.bibliography.size.headline">
                    <option>Large</option>
                    <option>Medium</option>
                    <option>Small</option>
                </select>
            </li>
            <li><label for="size-colinch">Col-inch</label> <input name="size-colinch" id="root.bibliography.size.col-inch"/></li>
            <li><label for="size-article">Article</label>
                <select name="size-article" id="root.bibliography.size.article">
                    <option></option>
                    <option>Full page</option>
                    <option>More than half of the page</option>
                    <option>Half of the page</option>
                    <option>More than a quarter of the page</option>
                    <option>Quarter of the page</option>
                    <option>Less than a quarter of the page</option>
                </select>
            </li>
        </ul>
        </fieldset>
        <li><label for="file">File</label> <input name="file" id="root.bibliography.file"/></li>
        <script>
        uploadField = document.getElementById("root.bibliography.file");

        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            uploadField.addEventListener(eventName, (e)=>{
                e.preventDefault();
                e.stopPropagation();
            }, false);
        });

        ['dragenter', 'dragover'].forEach(eventName =>{
            uploadField.addEventListener(eventName, (e)=>{
                uploadField.style.backgroundColor = "red";
                console.log(e);
            }, false);
        });

        ['dragleave', 'drop'].forEach(eventName =>{
            uploadField.addEventListener(eventName, (e)=>{
                uploadField.style.backgroundColor = "white";
                console.log(e);
            }, false);
        });

        uploadField.addEventListener("drop", (e)=>{
            uploadField.style.backgroundColor = "white";
            let files = e.dataTransfer.files;
            files = [...files];
            checkAuth(files);
        });

        function checkAuth(files) {
            let url = "/isauth";
            fetch(url, {
                method: 'GET'
            })
            .then((response) => {
                return response.json();
            })
            .then((json) => {
                console.log(json);
                if (json.authUrl) {
                    console.log("opening window");
                    let popup = window.open(json.authUrl, "ThaiDB", "location=0,status=0,width=800,height=400");
                    if (popup) {
                        let timer = window.setInterval(()=>{
                            if (popup.closed) {
                                window.clearInterval(timer);
                                /*
                                    Check if logged in
                                */
                            }
                        }, 1000);
                    }
                    else {
                        /* Error. Inform the user */
                    }
                }
                else {
                    files.forEach(file=>{
                        uploadFile(file);
                    });
                }
            })
            .catch(() => { /* Error. Inform the user */ })
        }

        function uploadFile(file) {
            let url = "/training/upload";
            let formData = new FormData()

            formData.append('file', file)

            fetch(url, {
                method: 'POST',
                body: formData
            })
            .then(() => {
                uploadField.value = file.name;
            })
            .catch(() => { /* Error. Inform the user */ })
        }
        </script>
        <li><label for="photo">Photo</label>
            <select name="photo" id="root.bibliography.photo">
                <option>yes</option>
                <option>no</option>
            </select>
        </li>
        <li><label for="type">Type</label> 
            <select name="type" id="root.bibliography.type">
                <option>Advertisement</option>
                <option>Editorial</option>
                <option>Interview</option>
                <option>Letters</option>
                <option>News article</option>
                <option>Opinion piece</option>
            </select>
        </li>
    </ul>
    </fieldset>
    <script>
        if (data.bibliography) {
            setEditValue("root.bibliography.total", data.bibliography.total);
            setEditValue("root.bibliography.headline", data.bibliography.headline);
            setEditValue("root.bibliography.headline-thai", data.bibliography["headline-thai"]);
            setEditValue("root.bibliography.newspaper", data.bibliography.newspaper);
            setEditValue("root.bibliography.date", data.bibliography.date);
            setEditValue("root.bibliography.publication", data.bibliography.publication);
            setEditValue("root.bibliography.page", data.bibliography.page);
            setSelectValue("root.bibliography.location", data.bibliography.location);
            setSelectValue("root.bibliography.size.headline", data.bibliography.size.headline);
            setEditValue("root.bibliography.size.col-inch", data.bibliography.size["col-inch"]);
            setSelectValue("root.bibliography.size.article", data.bibliography.size.article);
            setEditValue("root.bibliography.file", data.bibliography.file);
            setSelectValue("root.bibliography.photo", data.bibliography.photo);
            setSelectValue("root.bibliography.type", data.bibliography.type);
        }

        function getBibliography() {
            return {
                total: getEditValue("root.bibliography.total"),
                headline: getEditValue("root.bibliography.headline"),
                "headline-thai": getEditValue("root.bibliography.headline-thai"),
                newspaper: getEditValue("root.bibliography.newspaper"),
                date: getEditValue("root.bibliography.date"),
                publication: getEditValue("root.bibliography.publication"),
                page: getEditValue("root.bibliography.page"),
                location: getEditValue("root.bibliography.location"),
                size:{
                    headline: getEditValue("root.bibliography.size.headline"),
                    "col-inch": getEditValue("root.bibliography.size.col-inch"),
                    article: getEditValue("root.bibliography.size.article"),
                },
                file: getEditValue("root.bibliography.file"),
                photo: getEditValue("root.bibliography.photo"),
                type: getEditValue("root.bibliography.type")
            };
        }
    </script>
    <fieldset style="margin-top: 20px;"><legend>Categories</legend>
    <ul>
        <fieldset style="margin-top: 20px;"><legend>Focus</legend>
            <ul>
                <li><label for="focus-topic">Topic</label> 
                    <select name="focus-topic" id="root.categories.focus.topic">
                        <option>Event/Happening</option>
                        <option>People</option>
                        <option>Product (service)</option>
                    </select>
                </li>
                <li><label for="focus-level">Level</label> 
                    <select name="focus-level" id="root.categories.focus.level">
                        <option></option>   
                        <option>Local</option>
                        <option>National</option>     
                        <option>ASEAN</option>
                        <option>International</option>
                        
                    </select>
                </li>
            </ul>
        </fieldset>
        <script>
            if (data.categories && data.categories.focus) {
                setSelectValue("root.categories.focus.topic", data.categories.focus.topic);
                setSelectValue("root.categories.focus.level", data.categories.focus.level);
            }

            function getFocus() {
            return {
                topic: getEditValue("root.categories.focus.topic"),
                level: getEditValue("root.categories.focus.level")
            };
        }
        </script>
        <fieldset style="margin-top: 20px;"><legend>Place</legend>
            <ul>
                <li><label for="place-geo">Geo</label> <input name="place-geo" id="root.categories.place.geo" disabled/></li>
                <li><label for="place-geo-country">Country</label> 
                    <select name="place-geo-country" id="root.categories.place.geo.country">
                        <option></option>
                    </select></li>
                <li><label for="place-geo-province">Province</label> 
                    <select name="place-geo-province" id="root.categories.place.geo.province">
                        <option></option>
                    </select></li>
                <li><label for="place-geo-district">District</label> 
                    <select name="place-geo-district" id="root.categories.place.geo.district">
                        <option></option>
                    </select></li>
                <li><label for="place-geo-city">City</label> 
                    <input name="place-geo-city" id="root.categories.place.geo.city"/></li>
                <li><label></label> <div><button id="fetchGeo">Autofill geo coordinates</button></div></li>
                <li><label for="place-latitude">Latitude</label> 
                    <input name="place-latitude" id="root.categories.place.latitude"/></li>
                <li><label for="place-longitude">Longitude</label> 
                    <input name="place-longitude" id="root.categories.place.longitude"/></li>
                <li><label for="place-type">Type</label> <select name="place-type" id="root.categories.place.type">
                        <option></option>
                        <option>Indoor</option>
                        <option>Indoor/Outdoor</option>
                        <option>Outdoor</option>
                    </select>
                </li>
                <li><label for="place-space">Space</label>
                    <select name="place-space" id="root.categories.place.space">
                        <option></option>
                        <option>Private</option>
                        <option>Public</option>
                    </select>
                </li>
                <li><label for="place-density">Density</label>
                    <select name="place-density" id="root.categories.place.density">
                        <option></option>
                        <option>Central area</option>
                        <option>Suburbs area</option>
                        <option>Country side</option>
                    </select>
                </li>
                <li><label for="place-specific">Specific</label> <input name="place-specific" id="root.categories.place.specific"/></li>
            </ul>
        </fieldset>
        <script>
            let country = document.getElementById("root.categories.place.geo.country");
            let province = document.getElementById("root.categories.place.geo.province");
            let district = document.getElementById("root.categories.place.geo.district");
            fillSelect(country, countryList, (key)=>key.toLowerCase());
            fillSelect(province, Object.keys(thaiProvinceDistrict), (key)=>key.toLowerCase());
            function syncProvinceDistrict() {
                let country = document.getElementById("root.categories.place.geo.country");
                let province = document.getElementById("root.categories.place.geo.province");
                let district = document.getElementById("root.categories.place.geo.district");
                province.disabled = country.value != "thailand";
                district.disabled = country.value != "thailand";
                if (province.disabled) province.value="";
                if (district.disabled) district.value="";
            }
            function syncDistricts() {
                let province = document.getElementById("root.categories.place.geo.province");
                let district = document.getElementById("root.categories.place.geo.district");
                let provinceLower = province.value;
                let provinceUpper = Object.keys(thaiProvinceDistrict).find((key)=>key.toLowerCase()===provinceLower);
                let districtList = thaiProvinceDistrict[provinceUpper];
                district.innerHTML = "<option></option>";
                fillSelect(district, districtList, (key)=>key.toLowerCase());
            }
            if (data.categories && data.categories.place) {
                setEditValue("root.categories.place.geo", data.categories.place.geo);
                let [country,province,district,city] = data.categories.place.geo ? data.categories.place.geo.split(",") : "";
                setSelectValue("root.categories.place.geo.country", country);
                setSelectValue("root.categories.place.geo.province", province);
                syncDistricts();
                syncProvinceDistrict();
                setSelectValue("root.categories.place.geo.district", district);
                setEditValue("root.categories.place.geo.city", city);
                setEditValue("root.categories.place.latitude", data.categories.place.latitude);
                setEditValue("root.categories.place.longitude", data.categories.place.longitude);
                setSelectValue("root.categories.place.type", data.categories.place.type);
                setSelectValue("root.categories.place.space", data.categories.place.space);
                setSelectValue("root.categories.place.density", data.categories.place.density);
                setEditValue("root.categories.place.specific", data.categories.place.specific);
            }
            else {
                setSelectValue("root.categories.place.geo.country", "thailand");
                setSelectValue("root.categories.place.geo.province", "bangkok");
                syncDistricts();
            }
            country.addEventListener("change", ()=>{
                syncProvinceDistrict();
            });
            province.addEventListener("change", ()=>{
                syncDistricts();
            });
            fetchGeo.addEventListener("click", ()=>{
                let location = [
                    "root.categories.place.geo.city", 
                    "root.categories.place.geo.district", 
                    "root.categories.place.geo.province", 
                    "root.categories.place.geo.country"
                ].map(n=>document.getElementById(n).value).filter(n=>n!="").join(",");
                let url = `https://nominatim.openstreetmap.org/search?q=${location}&format=json`;
                fetch(url).then(function(response) {
                    return response.json();
                }).then(function(latLong) {
                    let latitude = document.getElementById("root.categories.place.latitude");
                    let longitude = document.getElementById("root.categories.place.longitude");
                    latitude.value = latLong[0].lat;
                    longitude.value = latLong[0].lon;
                });
            });

            function getPlace() {
                return {
                    geo: [
                        getEditValue("root.categories.place.geo.country"),
                        getEditValue("root.categories.place.geo.province"),
                        getEditValue("root.categories.place.geo.district"),
                        getEditValue("root.categories.place.geo.city")
                    ].join(","),
                    country: getEditValue("root.categories.place.geo.country"),
                    province: getEditValue("root.categories.place.geo.province"),
                    district: getEditValue("root.categories.place.geo.district"),
                    city: getEditValue("root.categories.place.geo.city"),
                    latitude: getEditValue("root.categories.place.latitude"),
                    longitude: getEditValue("root.categories.place.longitude"),
                    type: getEditValue("root.categories.place.type"),
                    space: getEditValue("root.categories.place.space"),
                    density: getEditValue("root.categories.place.density"),
                    specific: getEditValue("root.categories.place.specific")
                }
            };
            </script>
        <fieldset style="margin-top: 20px;"><legend>Happening <button id="add-happening">+</button></legend>
            <ul id="happenings">
            </ul>
            <script>
                function appendHappening(happening) {
                    let happenings = document.getElementById("happenings");
                    let happeningContainer = document.createElement("happening");
                    let group = document.createElement("fieldset");
                    happeningContainer.appendChild(group);
                    let legend = document.createElement("legend");
                    let button = document.createElement("button");
                    button.classList.add("delete");
                    button.innerHTML = "&times;";
                    button.addEventListener("click", ()=>{
                        happenings.removeChild(happeningContainer);
                    });
                    legend.appendChild(button);
                    group.appendChild(legend);
                    addText(group, "Name", "happening-name", happening ? happening.name : "");
                    addSelect(group, "External factor", "happening-external-factor", [
                        "",
                        "Epidemy",
                        "Disaster",
                        "Weather",
                        "Seasons",
                        "Pollution",
                        "Economy",
                        "Culture/Education",
                        "Government",
                        "Politics",
                        "Propaganda",
                        "Religion",
                        "Legal factors",
                        "Society",
                        "Architecture",
                        "Infrastructure",
                        "Technology",
                        "Geographical area",
                        "Other (not mentioned above)",
                    ], happening ? happening["external-factor"] : "");
                    addText(group, "Place", "happening-place", happening ? happening.place: "");
                    addText(group, "Place specific", "happening-place-specific", happening ? happening["place-specific"]: "");
                    let timeGroup = document.createElement("fieldset");
                    let timeLegend = document.createElement("legend");
                    timeLegend.innerText = "Time";
                    timeGroup.appendChild(timeLegend);
                    addSelect(timeGroup, "Season", "happening-time-season", ["", "Hot season", "Rainy season", "Cool season"], happening && happening.time ? happening.time.season: "");
                    addText(timeGroup, "Year", "happening-time-year", happening && happening.time ? happening.time.year: "");
                    addText(timeGroup, "Month", "happening-time-month", happening && happening.time ? happening.time.month: "");
                    addText(timeGroup, "Day", "happening-time-day", happening && happening.time ? happening.time.day: "");
                    addText(timeGroup, "Period", "happening-time-period", happening && happening.time ? happening.time.period: "");
                    group.appendChild(timeGroup);
                    happenings.appendChild(happeningContainer);
                }
                let addHappening = document.getElementById("add-happening");
                addHappening.addEventListener("click", ()=>{
                    appendHappening();
                });
                if (data.categories && data.categories.happenings) {
                    data.categories.happenings.forEach(h=>appendHappening(h));
                }
                else if (data.categories && data.categories.happening) {
                    data.categories.happening.forEach(h=>appendHappening(h));
                }

                function getHappening(happening) {
                    return {
                        name: happening.getElementsByClassName("happening-name")[0].value,
                        "external-factor": happening.getElementsByClassName("happening-external-factor")[0].value,
                        place: happening.getElementsByClassName("happening-place")[0].value,
                        "place-specific": happening.getElementsByClassName("happening-place-specific")[0].value,
                        time:{
                            season: happening.getElementsByClassName("happening-time-season")[0].value,
                            year: happening.getElementsByClassName("happening-time-year")[0].value,
                            month: happening.getElementsByClassName("happening-time-month")[0].value,
                            day: happening.getElementsByClassName("happening-time-day")[0].value,
                            period: happening.getElementsByClassName("happening-time-period")[0].value
                        }
                    }
                }

                function getHappenings() {
                    let happenings = document.getElementById("happenings");
                    let happeningList = happenings.getElementsByTagName("happening");
                    return Array.prototype.map.call(happeningList, happening=>getHappening(happening));
                }
            </script>
        </fieldset>
        <fieldset style="margin-top: 20px;"><legend>People <button id="add-person">+</button></legend>
            <ul id="people">
            </ul>
            <script>
                function appendPerson(person) {
                    let people = document.getElementById("people");
                    let group = document.createElement("fieldset");
                    let legend = document.createElement("legend");
                    let button = document.createElement("button");
                    button.classList.add("delete");
                    button.innerHTML = "&times;";
                    button.addEventListener("click", ()=>{
                        people.removeChild(group);
                    });
                    legend.appendChild(button);
                    group.appendChild(legend);
                    addText(group, "Name", "person-name", person ? person.name : "");
                    addSelect(group, "Density", "person-density", ["", "Central area", "Suburbs area", "Country side"], person ? person.density : "");
                    addText(group, "Place", "person-place", person ? person.place : "");
                    addText(group, "Place specific", "person-place-specific", person ? person["place-specific"] : "");
                    addSelect(group, "Work type", "person-work-type", [
                        "", 
                        "Full time", 
                        "Part time",
                        "Student",
                        "Unemployed",
                        "Stay at home", 
                        "Retired",
                        "Self-employed"], person ? person["work-type"] : "");
                    addSelect(group, "Education level", "person-education-level", [
                        "", 
                        "Lower than High School", 
                        "High School", 
                        "University Bachelor/College",
                        "University Higher"], person ? person["education-level"] : "");
                    addSelect(group, "Field", "person-field", [
                        "",              
                        "Agriculture and Fishery",
                        "Architecture & Planning",
                        "Arts & Entertainment",
                        "Business",
                        "Communication",
                        "Craftmanship",
                        "Education",
                        "Engineering",
                        "Government",
                        "Health & Medicine",
                        "Law and Politics",
                        "Manufacturing",
                        "Military",
                        "Not-for-profit",
                        "Religion",
                        "Retail",
                        "Sciences/Research",
                        "Sport",
                    ], person ? person.field : "");
                    addText(group, "Work specific", "person-work-specific", person ? person["work-specific"] : "");
                    addText(group, "Organization", "person-organization", person ? person.organization : "");
                    addSelect(group, "Gender", "person-gender", [
                        "",  
                        "Female",
                        "Male",
                        "Undecided"
                    ], person ? person.gender : "");
                    addSelect(group, "Age", "person-age", [
                        "",      
                        "Infant",
                        "Pre-school",
                        "School age/teenager",
                        "Young adult",  
                        "Adult",
                        "Older adult",
                        "Elderly"
                    ], person ? person.age : "");
                    addText(group, "Age specific", "person-age-specific", person ? person["age-specific"] : "");
                    addText(group, "Role", "person-role", person ? person.role : "");
                    addText(group, "Action", "person-action", person ? person.action : "");
                    people.appendChild(group);
                }
                let addPerson = document.getElementById("add-person");
                addPerson.addEventListener("click", ()=>{
                    appendPerson();
                });
                if (data.categories && data.categories.people) {
                    data.categories.people.forEach(p=>appendPerson(p));
                }

                function getPerson(person) {
                    return {
                        name: person.getElementsByClassName("person-name")[0].value,
                        density: person.getElementsByClassName("person-density")[0].value,
                        place: person.getElementsByClassName("person-place")[0].value,
                        "place-specific": person.getElementsByClassName("person-place-specific")[0].value,
                        "work-type": person.getElementsByClassName("person-work-type")[0].value,
                        "education-level": person.getElementsByClassName("person-education-level")[0].value,
                        "field": person.getElementsByClassName("person-field")[0].value,
                        "work-specific": person.getElementsByClassName("person-work-specific")[0].value,
                        "organization": person.getElementsByClassName("person-organization")[0].value,
                        "gender": person.getElementsByClassName("person-gender")[0].value,
                        "age": person.getElementsByClassName("person-age")[0].value,
                        "age-specific": person.getElementsByClassName("person-age-specific")[0].value,
                        "role": person.getElementsByClassName("person-role")[0].value,
                        "action": person.getElementsByClassName("person-action")[0].value
                    }
                }

                function getPeople() {
                    let people = document.getElementById("people");
                    fieldsets = people.getElementsByTagName("fieldset");
                    return Array.prototype.map.call(fieldsets, person=>getPerson(person));
                }
            </script>    
        </fieldset>
        <fieldset style="margin-top: 20px;"><legend>Organizations <button id="add-organization">+</button></legend>
            <ul id="organizations">
            </ul>
            <script>
                function appendOrganization(organization) {
                    let organizations = document.getElementById("organizations");
                    let li = addText(organizations, "Name", "organization-name", organization ? organization.name : "");
                    let button = document.createElement("button");
                    button.classList.add("delete");
                    button.innerHTML = "&times;";
                    button.addEventListener("click", ()=>{
                        organizations.removeChild(li);
                    });
                    li.appendChild(button);
                }
                let addOrganization = document.getElementById("add-organization");
                addOrganization.addEventListener("click", ()=>{
                    appendOrganization();
                });
                if (data.categories && data.categories.organizations) {
                    data.categories.organizations.forEach(o=>appendOrganization(o));
                }

                function getOrganizations() {
                    let organizations = document.getElementById("organizations");
                    let inputs = organizations.getElementsByTagName("input");
                    return Array.prototype.map.call(inputs, organization=>({name:organization.value}));
                }
            </script>
        </fieldset>
        <fieldset style="margin-top: 20px;"><legend>Product <button id="add-product">+</button></legend>
            <ul id="products">
            </ul>
            <script>
                function appendProduct(product) {
                    let products = document.getElementById("products");
                    let productContainer = document.createElement("productContainer");
                    let group = document.createElement("fieldset");
                    productContainer.appendChild(group);
                    let legend = document.createElement("legend");
                    let button = document.createElement("button");
                    button.classList.add("delete");
                    button.innerHTML = "&times;";
                    button.addEventListener("click", ()=>{
                        products.removeChild(productContainer);
                    });
                    legend.appendChild(button);
                    group.appendChild(legend);
                    let kindPart = addSelect(group, "Kind", "product-kind", [
                        "personal hygiene product",
                        "house cleaning detergent",
                        "food/supplement",
                        "devices/tools",
                        "service",
                        "other (not mentioned above)"
                    ], product ? product.kind : "");
                    function isBody(product) {
                        return product.target === "body" || (product.hygiene && product.hygiene.body && product.hygiene.body != "NA");
                    }
                    function isHead(product) {
                        return product.subtarget === "head" || (product.hygiene && product.hygiene.head && product.hygiene.head != "NA");
                    }
                    function isEnvironment(product) {
                        return  product.target === "environment" || (product.cleaning && product.cleaning.target && product.cleaning.target != "NA");
                    }
                    function getTarget(product) {
                        if (product) {
                            if (product.target) {
                                return product.target;
                            }
                            else if (isBody(product) || isHead(product)) {
                                return "body";
                            }
                            else if (isEnvironment(product)) {
                                return "environment";
                            }
                            else {
                                return "";
                            }
                        }
                        else {
                            return "";
                        }
                    }
                    function getSubTarget(product) {
                        if (product.subtarget) {
                            return product.subtarget;
                        }
                        else {
                            return product.hygiene && product.hygiene.body && product.hygiene.body != "NA" ? product.hygiene.body : "";
                        }
                    }
                    function getSubSubTarget(product) {
                        if (product.subsubtarget) {
                            return product.subsubtarget;
                        }
                        else {
                            return product.hygiene && product.hygiene.head && product.hygiene.head != "NA" ? product.hygiene.head : "";
                        }
                    }
                    function getForm(product) {
                        return product.form || (product.cleaning ? product.cleaning.form : "");
                    }
                    function getFunction(product) {
                        return product.function || (product.hygiene ? product.hygiene.kind : product.cleaning ? product.cleaning.function : "");
                    }
                    let target = addSelect(group, "Target", "product-target", [
                        "",
                        "body",
                        "environment"
                    ], getTarget(product));
                    let subTarget = addSelect(group, " ", "product-subtarget", []);
                    let subsubTarget = addSelect(group, " ", "product-subsubtarget", []);
                    let productFuction = addSelect(group, "Function", "product-function");
                    function syncSubTarget() {
                        target = group.getElementsByClassName("product-target")[0];
                        subTarget = group.getElementsByClassName("product-subtarget")[0];
                        subTarget.innerText = "";
                        if (target.value === "body") {
                            subTarget.disabled = false;
                            fillSelect(subTarget, [
                                "",
                                "body",
                                "head",
                                "neck",
                                "shoulders",
                                "hands",
                                "arms",
                                "armpits",
                                "intimate area",
                                "legs",
                                "feet",
                                "other (not mentioned above)"
                            ]);
                        }
                        else if (target.value === "environment") {
                            subTarget.disabled = false;
                            fillSelect(subTarget, [
                                "",
                                "house",
                                "kitchen",
                                "bathroom",
                                "toilet",
                                "outside",
                                "clothes",
                                "other (not mentioned above)"
                            ]);
                        }
                        else {
                            subTarget.disabled = true;
                        }
                    }
                    function syncSubSubTarget() {
                        subTarget = group.getElementsByClassName("product-subtarget")[0];
                        subSubTarget = group.getElementsByClassName("product-subsubtarget")[0];
                        subSubTarget.innerText = "";
                        if (subTarget.value === "head") {
                            subSubTarget.disabled = false;
                            fillSelect(subSubTarget, [
                                "",
                                "hair",
                                "face",
                                "eyebrows",
                                "eyes",
                                "ears",
                                "mouth",
                                "teeth",
                                "lips",
                                "other (not mentioned above)"
                            ]);
                        }
                        else {
                            subSubTarget.disabled = true;
                        }
                    }
                    function syncFunction() {
                        let target = group.getElementsByClassName("product-target")[0];
                        let productFunction = group.getElementsByClassName("product-function")[0];
                        productFunction.innerText = "";
                        if (target.value === "body") {
                            fillSelect(productFunction, [
                                "",
                                "soap",
                                "shampoo",
                                "treatment",
                                "cream/lotion",
                                "sun screen",
                                "anti-oil products",
                                "anti-sweat/anti-smell",
                                "sterilizer",
                                "oral hygiene",
                                "diapers",
                                "menstruation products/panty liner",
                                "urine pads",
                                "other (not mentioned above)"
                            ]);
                        }
                        else if (target.value === "environment") {
                            fillSelect(productFunction, [
                                "",
                                "detergent",
                                "fat/stains remover",
                                "bleach",
                                "clothes softener",
                                "clothes hardener",
                                "anti-odor/fragrance",
                                "other (not mentioned above)"
                            ]);
                        }
                    }
                    addSelect(group, "Form", "product-form", [             
                        "",
                        "beads",     
                        "cream",
                        "foam",
                        "liquid",
                        "powder",
                        "solid",
                        "sheets",
                        "spray",
                        "other (not mentioned above)"
                    ], product ? getForm(product) : "");
                    addText(group, "Specific", "product-specific", product ? product["product-specific"] || product["service-specific"] : "");
                    addSelect(group, "Target gender", "target-gender", [
                        "",
                        "Women",
                        "Men",
                        "Not gender specific"
                    ], product ? product["target-gender"] : "");
                    addSelect(group, "Target age", "target-age", [
                        "",
                        "Infant",
                        "Pre-school",
                        "School age/teenager",
                        "Young adult",
                        "Adult",
                        "Older adult",
                        "Elderly",
                    ], product ? product["target-age"] : "");
                    products.appendChild(productContainer);

                    group.getElementsByClassName("product-target")[0].addEventListener("change", ()=>{
                        syncSubTarget();
                        syncSubSubTarget();
                        syncFunction();
                    });
                    group.getElementsByClassName("product-subtarget")[0].addEventListener("change", ()=>{
                        syncSubSubTarget();
                    });

                    syncSubTarget();
                    productContainer.getElementsByClassName("product-subtarget")[0].value = getSubTarget(product);
                    syncSubSubTarget();
                    productContainer.getElementsByClassName("product-subsubtarget")[0].value = getSubSubTarget(product);
                    syncFunction();
                    productContainer.getElementsByClassName("product-function")[0].value = getFunction(product);
                }
                let addProduct = document.getElementById("add-product");
                addProduct.addEventListener("click", ()=>{
                    appendProduct();
                });
                if (data.categories && data.categories.products) {
                    data.categories.products.forEach(p=>appendProduct(p));
                }
                else if (data.categories && data.categories.product) {
                    appendProduct(data.categories.product);
                }

                function getProduct(product) {
                    return {
                        kind: product.getElementsByClassName("product-kind")[0].value,
                        target: product.getElementsByClassName("product-target")[0].value,
                        subtarget: product.getElementsByClassName("product-subtarget")[0].value,
                        subsubtarget: product.getElementsByClassName("product-subsubtarget")[0].value,
                        function: product.getElementsByClassName("product-function")[0].value,
                        form: product.getElementsByClassName("product-form")[0].value,
                        "product-specific": product.getElementsByClassName("product-specific")[0].value,
                        "target-gender": product.getElementsByClassName("target-gender")[0].value,
                        "target-age": product.getElementsByClassName("target-age")[0].value,
                    }
                }

                function getProducts() {
                    let products = document.getElementById("products");
                    productContainers = products.getElementsByTagName("productContainer");
                    return Array.prototype.map.call(productContainers, product=>getProduct(product));
                }
            </script>
        </fieldset>
        <fieldset style="margin-top: 20px;"><legend>Topics <button id="add-topic">+</button></legend>
            <ul id="topics">
            </ul>
            <script>
                let addTopic = document.getElementById("add-topic");
                function appendTopic(topic) {
                    let topics = document.getElementById("topics");
                    let li = addSelect(topics, null, "topic", [
                        "Community",
                        "Education",
                        "Gender and ethnicity",
                        "Health",
                        "Personal hygiene/Beauty",
                        "Life-style/Festival",
                        "Policy/Government",
                        "Religion",
                        "Research and technology",
                        "Workforce",
                        "Tourism/Travelling",
                        "Entertainment/Sports",
                        "Environment",
                        "Other (not mentioned above)"
                    ], topic);
                    let button = document.createElement("button");
                    button.classList.add("delete");
                    button.innerHTML = "&times;";
                    button.addEventListener("click", ()=>{
                        topics.removeChild(li);
                        addTopic.disabled = topics.children.length > 2;
                    });
                    li.appendChild(button);
                    addTopic.disabled = topics.children.length > 2;
                }
                addTopic.addEventListener("click", ()=>{
                    appendTopic();
                })
                if (data.categories && data.categories.topics) {
                    data.categories.topics.forEach(t=>appendTopic(t));
                }

                function getTopics() {
                    let topics = document.getElementById("topics");
                    let selects = topics.getElementsByTagName("select");
                    return Array.prototype.map.call(selects, topic=>topic.value);
                }
            </script>
        </fieldset>
        <fieldset style="margin-top: 20px;"><legend>Context</legend>
            <ul>
                <li><select name="category" id="root.newCategory">
                        <option></option>
                        <option>Cleaning event</option>
                        <option>Cleanliness and health advice</option>
                        <option>Cosmetics and supplements</option>
                        <option>Technology and innovation</option>
                        <option>Environment and sustainability</option>
                        <option>Crime</option>
                        <option>Law</option>
                        <option>Habits and customs</option>
                        <option>Disasters and accidents</option>
                        <option>Foreign affairs</option>
                        <option>Miscellaneous</option>
                    </select>
                </li>
            </ul>
            <script>
                setSelectValue("root.newCategory", data.newCategory);
            </script>
        </fieldset>
    </ul>
    </fieldset>
    <fieldset style="margin-top: 20px;"><legend>General</legend>
        <ul>
            <li><label for="comments">Comments</label> <textarea name="comments" id="root.comments"></textarea></li>
            <fieldset style="margin-top: 20px;"><legend>Article</legend>
                <ul>
                    <li><label for="text">Text</label> <textarea name="text" id="root.article.text"></textarea></li>
                    <li><label for="abstract">Abstract</label> <textarea name="abstract" id="root.article.abstract"></textarea></li>
                    <li><label for="keywords">Keywords</label> <input name="keywords" id="root.article.keywords"/></li>
                    <li><label for="keywords-thai">Keywords (Thai)</label> <input name="keywords-thai" id="root.article.keywords-thai"/></li>
                </ul>
            </fieldset>
        </ul>
    </fieldset>
    <script>
        setEditValue("root.comments", data.comments);
        if (data.article) {
            setEditValue("root.article.text", data.article.text);
            setEditValue("root.article.abstract", data.article.abstract);
            setEditValue("root.article.keywords", data.article.keywords);
            setEditValue("root.article.keywords-thai", data.article["keywords-thai"]);
        }
    </script>
    <button id="save">Save</button>
    <script>
    document.getElementById("save").addEventListener("click", ()=>{
        let data = {
            id: getEditValue("root.id"),
            relevance: getEditValue("root.relevance"),
            newCategory: getEditValue("root.newCategory"),
            bibliography: getBibliography(),
            categories: {
                focus: getFocus(),
                place: getPlace(),
                happenings: getHappenings(),
                people: getPeople(),
                organizations: getOrganizations(),
                products: getProducts(),
                topics: getTopics()
            },
            comments: getEditValue("root.comments"),
            article:{
                text: getEditValue("root.article.text"),
                abstract: getEditValue("root.article.abstract"),
                keywords: getEditValue("root.article.keywords"),
                "keywords-thai": getEditValue("root.article.keywords-thai")
            }
        }
        console.log(JSON.stringify(data,null,2));
        //let container = document.getElementsByClassName("container")[0];
        //container.classList.add('loader');
        document.getElementById("save").disabled = true;
        fetch("/training/save", {
            method: 'POST', // or 'PUT'
            body: JSON.stringify(data),
            headers:{
                'Content-Type': 'application/json'
            }
        }).then(res => res.json())
        .then(response => {
            //container.classList.remove('loader');
            document.getElementById("save").disabled = false;
            console.log('Success:', JSON.stringify(response));
            window.location = "/training/list";
        })
        .catch(error => {
            //container.classList.remove('loader');
            document.getElementById("save").disabled = false;
            console.error('Error:', error);
        });
    });
    </script>
    </div>
</body>
</html>